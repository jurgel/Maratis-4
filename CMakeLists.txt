PROJECT(MARATIS)

## Let's use a reasonable modern version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)

## options
option(USE_SDL2 "Use SDL2 backend" OFF)

## modules
SET(CMAKE_HAS_SORT 1)
SET(CMAKE_MODULE_PATH
  ${MARATIS_SOURCE_DIR}/CMake
  ${MARATIS_SOURCE_DIR}/CMake/Packages
  ${CMAKE_MODULE_PATH}
)

## Disallow in-source builds
INCLUDE(OutOfSourceBuild)

## Set version and info
SET(MARATIS_MAJOR_VERSION 4)
SET(MARATIS_MINOR_VERSION 0)
SET(MARATIS_PATCH_VERSION 0)

SET(MARATIS_PACKAGE "Maratis")
SET(MARATIS_VENDOR "Anael Seghezzi")
SET(MARATIS_VERSION "${MARATIS_MAJOR_VERSION}.${MARATIS_MINOR_VERSION}.${MARATIS_PATCH_VERSION}")
SET(MARATIS_COPYRIGHT "Copyright (c) 2003-2014, ${MARATIS_VENDOR}.")

MESSAGE(STATUS "${MARATIS_PACKAGE} ${MARATIS_VERSION}")

## Set install path
SET(MARATIS_INSTALL_DIR Maratis)


## Compiler settings
IF(WIN32)
  FIND_PACKAGE(OpenGL REQUIRED)
  SET(MTCL_BUILD_FLAGS "")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MOE_BUILD_FLAGS} /EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /W1 /Ox /Ot /MD /DNDEBUG")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MARATIS_BUILD_FLAGS} /EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /W1 /Ox /Ot /MD /DNDEBUG")
  SET(OS_SPECIFIC_LIBRARIES)
ENDIF(WIN32)

IF(APPLE)
  FIND_PACKAGE(OpenGL REQUIRED)
  FIND_LIBRARY(COCOA_LIB Cocoa)
  FIND_LIBRARY(CORE_SERVICES_LIB CoreServices)
  FIND_LIBRARY(FOUNDATION_LIB Foundation)
  FIND_LIBRARY(IOKIT_LIB IOKit)
  SET(MTCL_BUILD_FLAGS "-mmacosx-version-min=10.6")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MTCL_BUILD_FLAGS} -O3 -DOSX")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MTCL_BUILD_FLAGS} -O3 -DOSX")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_SHARED_LINKER_FLAGS "-Wl")
  SET(OS_SPECIFIC_LIBRARIES ${COCOA_LIB} ${CORE_SERVICES_LIB} ${FOUNDATION_LIB} ${IOKIT_LIB})
ENDIF(APPLE)

IF(UNIX AND NOT APPLE)
  FIND_PACKAGE(OpenGL REQUIRED)
  SET(MTCL_BUILD_FLAGS "")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MTCL_BUILD_FLAGS} -fPIC -DLINUX -ldl")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MTCL_BUILD_FLAGS} -fPIC -DLINUX -ldl")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
  SET(CMAKE_SHARED_LINKER_FLAGS "-ldl -Wl,--as-needed,--allow-multiple-definition,--build-id")
  SET(OS_SPECIFIC_LIBRARIES pthread Xxf86vm X11 Xrandr Xi)
ENDIF(UNIX AND NOT APPLE)

FIND_PACKAGE(OpenMP)
IF(OPENMP_FOUND)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ENDIF()


## Set up 3rd party dependencies
SET(DIRENT_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/windirent/include)
SET(TINYUTF8_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/tinyutf8)
SET(FREETYPE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/freetype/include)
SET(GLEE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/glee)
SET(TINYXML_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/tinyxml)
SET(FREEIMAGE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/freeimage/Source)
SET(GLFW_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/glfw/include)
SET(TINYCTHREAD_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/tinycthread/source)
SET(LUA_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/lua)
SET(BULLET_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/bullet)
SET(SDL_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/3rdparty/SDL2/include)

SET(FREETYPE_LIBRARIES freetype)
SET(GLEE_LIBRARIES glee)
SET(TINYXML_LIBRARIES tinyxml)
SET(FREEIMAGE_LIBRARIES freeimage)
SET(GLFW_LIBRARIES glfw)
SET(TINYCTHREAD_LIBRARIES tinycthread)
SET(LUA_LIBRARIES lua)
SET(BULLET_LIBRARIES BulletSoftBody BulletDynamics BulletCollision LinearMath)
SET(SDL_LIBRARIES SDL2-static)

## Set up SDK dependencies
SET(MC_DIR ${MARATIS_SOURCE_DIR}/../Maratis-Tiny-C-library)
SET(MC_INCLUDE_DIR ${MC_DIR}/include)
SET(MCORE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Sources/MSDK/MCore/Includes)
SET(MENGINE_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Sources/MSDK/MEngine/Includes)
SET(MGUI_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Sources/MSDK/MGui/Includes)
SET(MARATIS_COMMON_INCLUDE_DIR ${MARATIS_SOURCE_DIR}/Sources/Common)

SET(MCORE_LIBRARIES MCore)
SET(MENGINE_LIBRARIES MEngine)
SET(MGUI_LIBRARIES MGui)

INCLUDE_DIRECTORIES(${MC_INCLUDE_DIR})

## glfw / sdl2
IF(USE_SDL2)
SET(GUI_SOURCES ${MARATIS_COMMON_INCLUDE_DIR}/GUI/MGUI_SDL.cpp)
SET(GUI_INCLUDE_DIR ${SDL_INCLUDE_DIR})
SET(GUI_LIBRARIES ${SDL_LIBRARIES})
ELSE(USE_SDL2)
SET(GUI_SOURCES ${MARATIS_COMMON_INCLUDE_DIR}/GUI/MGUI_GLFW.cpp)
SET(GUI_INCLUDE_DIR ${GLFW_INCLUDE_DIR})
SET(GUI_LIBRARIES ${GLFW_LIBRARIES})
ENDIF(USE_SDL2)

## Set up subdirectories...
ADD_SUBDIRECTORY(3rdparty)
ADD_SUBDIRECTORY(Sources/MSDK)
ADD_SUBDIRECTORY(Sources/Maratis/Editor)
ADD_SUBDIRECTORY(Tests/GUI)
ADD_SUBDIRECTORY(Tests/ManualUse)
ADD_SUBDIRECTORY(Tests/Player)